// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

enum Role {
  DEPARTMENT_HEAD
  AGENCY_OWNER
  AGENCY_ADMIN
  OFFICE_ADMIN
  DELIVERY_PARTNER
  CUSTOMER
}

// schema.prisma
enum State {
  ANDHRA_PRADESH
  ARUNACHAL_PRADESH
  ASSAM
  BIHAR
  CHHATTISGARH
  GOA
  GUJARAT
  HARYANA
  HIMACHAL_PRADESH
  JHARKHAND
  KARNATAKA
  KERALA
  MADHYA_PRADESH
  MAHARASHTRA
  MANIPUR
  MEGHALAYA
  MIZORAM
  NAGALAND
  ODISHA
  PUNJAB
  RAJASTHAN
  SIKKIM
  TAMIL_NADU
  TELANGANA
  TRIPURA
  UTTAR_PRADESH
}

model User {
  id           String         @id @default(uuid())
  name         String
  avatarUrl    String?        @db.Text
  email        String         @unique
  password     String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(CUSTOMER)
  agencyId     String?
  AgencyHub    AgencyHub?     @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  PartnerId    String?
  Partner      Partner?       @relation(fields: [PartnerId], references: [id], onDelete: Cascade)
  Permissions  Permissions[]
  Notification Notification[]

  @@index([PartnerId])
  @@index([agencyId])
}

model Permissions {
  id           String      @id @default(uuid())
  email        String
  User         User        @relation(fields: [email], references: [email], onDelete: Cascade)
  partnerId    String
  Partner      Partner     @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  access       Boolean
  Postoffice   Postoffice? @relation(fields: [postofficeId], references: [id])
  postofficeId String?

  @@index([partnerId])
  @@index([postofficeId])
  @@index([email])
}

model AgencyHub {
  id            String                @id @default(uuid())
  name          String
  // agencyLogo    String?               @db.Text
  companyEmail  String                @unique
  companyPhone  String
  address       String
  city          String
  pincode       String
  state         String
  country       String
  users         User[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  Partner       Partner[]
  SidebarOption AgencySidebarOption[]
  Invitation    Invitation[]
  Notification  Notification[]
  // AddOns           AddOns[]
  // Owner            Owner[]
  Postoffice    Postoffice[]
}

model Partner {
  id            String                    @id @default(uuid())
  name          String
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  OfficeEmail   String                    @unique
  OfficePhone   String
  address       String
  pincode       String
  agencyHubId   String
  truckId       String?
  users         User[]
  AgencyHub     AgencyHub                 @relation(fields: [agencyHubId], references: [id], onDelete: Cascade)
  SidebarOption SubAccountSidebarOption[]
  Permissions   Permissions[]
  // Funnels          Funnel[]
  // Media            Media[]
  // Contact          Contact[]
  // Trigger          Trigger[]
  // Tags             Tag[]
  Notification  Notification[]

  @@index([agencyHubId])
}

model Postoffice {
  id              String                    @id @default(uuid())
  name            String
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  postofficeEmail String                    @db.Text
  postofficePhone String
  city            String
  state           State
  District        String?
  address         String
  pincode         String
  agencyHubId     String
  truckId         String?
  AgencyHub       AgencyHub                 @relation(fields: [agencyHubId], references: [id], onDelete: Cascade)
  SidebarOption   SubAccountSidebarOption[]
  Permissions     Permissions[]
  // Funnels          Funnel[]
  // Media            Media[]
  // Contact          Contact[]
  // Trigger          Trigger[]
  // Tags             Tag[]
  Notification    Notification[]
  Invitation      Invitation[]

  @@index([agencyHubId])
}

model AgencySidebarOption {
  id        String     @id @default(uuid())
  name      String     @default("Menu")
  link      String     @default("#")
  icon      Icon       @default(info)
  agencyId  String
  AgencyHub AgencyHub? @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([agencyId])
}

model SubAccountSidebarOption {
  id           String      @id @default(uuid())
  name         String      @default("Menu")
  link         String      @default("#")
  icon         Icon        @default(info)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Partner      Partner?    @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String?
  Postoffice   Postoffice? @relation(fields: [postofficeId], references: [id])
  postofficeId String?

  @@index([subAccountId])
  @@index([postofficeId])
}

model Invitation {
  id           String           @id @default(uuid())
  email        String           @unique
  agencyId     String
  message      String?
  Agency       AgencyHub        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  // Postoffice   Postoffice?      @relation(fields: [postofficeId], references: [id])
  status       InvitationStatus @default(PENDING)
  role         Role             @default(DELIVERY_PARTNER)
  postofficeId String?
  // Postoffice   Postoffice?      @relation(fields: [postofficeId], references: [id])
  Postoffice   Postoffice?      @relation(fields: [postofficeId], references: [id])

  @@index([agencyId])
  @@index([postofficeId])
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Notification {
  id           String  @id @default(uuid())
  notification String
  agencyId     String
  subAccountId String?
  userId       String

  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency     AgencyHub @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount Partner?  @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Postoffice   Postoffice? @relation(fields: [postofficeId], references: [id])
  postofficeId String?

  @@index([agencyId])
  @@index([subAccountId])
  @@index([postofficeId])
  @@index([userId])
}

model Truck {
  id        String   @id @default(cuid())
  truckId   String   @unique
  driver    String
  latitude  Float?
  longitude Float?
  speed     Float
  route     String
  capacity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Route {
  id     String @id @default(cuid())
  name   String
  eta    String
  status String
}

model Alert {
  id      String @id @default(cuid())
  type    String
  message String
}
